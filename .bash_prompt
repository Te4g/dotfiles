#!/bin/bash

RED="\[\033[0;31m\]"
LIGHT_RED="\[\033[1;31m\]"
GREEN="\[\033[0;32m\]"
LIGHT_GREEN="\[\033[1;32m\]"
YELLOW="\[\033[0;33m\]"
BOLD_YELLOW="\[\033[1;33m\]"
BLUE="\[\033[0;34m\]"
BOLD_BLUE="\[\033[1;34m\]"
PURPLE="\[\033[0;35m\]"
BOLD_PURPLE="\[\033[1;35m\]"
WHITE="\[\033[0;37m\]"
BOLD_WHITE="\[\033[1;37m\]"
LIGHT_GRAY="\[\033[0;37m\]"
BOLD_LIGHT_BLUE="\[\033[1;94m\]"
COLOR_NONE="\[\e[0m\]"

function parse_git_branch {
  git rev-parse --git-dir &> /dev/null
  git_status="$(git status 2> /dev/null)"
  branch_pattern="On branch ([^${IFS}]*)"
  remote_pattern="Your branch is (.*) '"
  diverge_pattern="Your branch and (.*) have diverged"

  if [[ ! ${git_status} =~ "working tree clean" ]]; then
    state="${RED}âš¡"
  else
	remote="${YELLOW}="
  fi
  # add an else if or two here if you want to get more specific
  if [[ ${git_status} =~ ${remote_pattern} ]]; then
    if [[ ${BASH_REMATCH[1]} == "ahead of" ]]; then
      remote="${YELLOW}ðŸ …"
    elif [[ ${BASH_REMATCH[1]} == "behind" ]]; then
      remote="${YELLOW}ðŸ ‡"
    fi
  fi
  if [[ ${git_status} =~ ${diverge_pattern} ]]; then
    remote="${YELLOW}ðŸ ‡ðŸ …"
  fi

  if [[ ${git_status} =~ ${branch_pattern} ]]; then
    branch=${BASH_REMATCH[1]}
    echo " (${branch})${remote}${state}"
  fi
}

function git_dirty_flag {
  git status 2> /dev/null | grep -c : | awk '{if ($1 > 0) print "âš¡"}'
}

function prompt_func() {
    previous_return_value=$?;
  	prompt="${TITLEBAR}${BOLD_LIGHT_BLUE}\w${LIGHT_GRAY}$(parse_git_branch)\n "

    if test $previous_return_value -eq 0
    then
        PS1="${prompt}${BOLD_PURPLE}\$${COLOR_NONE} "
    else
        PS1="${prompt}${RED}\$${COLOR_NONE} "
    fi
}

PROMPT_COMMAND=prompt_func
